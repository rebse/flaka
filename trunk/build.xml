<project xmlns:c="antlib:net.haefelingerit.flaka" name="flaka">
  <c:properties>
    baseline = HEAD
    res.dir =   
  </c:properties>

  <c:dependencies>
    <c:dependency alias="ant" />
    <c:dependency alias="junit" scope="test" />
    <c:dependency alias="commons-httpclient" scope="compile inline" />
    <c:dependency alias="commons-codec" scope="compile inline" />
    <c:dependency alias="commons-logging" scope="compile inline" version="1.1"/>
    <c:dependency alias="jdom" scope="compile inline"/>
    <c:dependency alias="juel" scope="compile inline"/>
    <!-- Not required for building, but running Ant scripts -->
    <!-- within Eclipse -->
    <c:dependency name="ant-launcher" scope="eclipse"/>
  </c:dependencies>

  <!-- Initialize Framework -->
  <c:init />

  <macrodef name="resources-copy" backtrace="true">
    <attribute name="dst" default="${obj.dir}"/>
    <attribute name="src" default="${src.dir}"/>
    <sequential>
      <!-- @{src} must exits, c:otherwise fileset fails -->
      <echo>@src = |a@{src}a|</echo>
      <c:when test="-d ' @{src} '">
        <c:copy-and-replace src="@{src}" dst="@{dst}">
          <exclude name="**/*.java"/>
          <type type="file"/>
        </c:copy-and-replace>
      </c:when>
    </sequential>
  </macrodef>

  <!-- override package init macro -->
  <macrodef name="package-init">
    <sequential>
      <c:package-init />
      <c:copy-and-replace 
          src = "ant" 
          dst = "${obj.dir}/net/haefelingerit/flaka"
          />
    </sequential>
  </macrodef>

  <presetdef name="junit">
    <junit dir="test"  />
  </presetdef>

  <presetdef name="javac">
      <javac source="1.5" debug="true">
        <!-- elements -->
      </javac>
  </presetdef>


  <macrodef name="package">
    <sequential>
      <echo>Using local package ..</echo>
      <c:package />
      <!-- package all artefacts in scope 'inline' -->
      <c:unset var="x" />
      <c:find dir="${lib.dir}" var="x">
        <c:dependency-selector scope="inline" />
    </c:find>
    <c:when test="-n '${x}'">
      <c:for var="file" in="${x}">
        <sequential>
          <echo>inlining @{file} ..</echo>
          <c:update-dist-jar jar="${jar.name}">
            <zipfileset src="@{file}" />
          </c:update-dist-jar>
        </sequential>
      </c:for>
    </c:when>
    </sequential>
  </macrodef>

  <target name=".classpath">
    <c:dotclasspath />
  </target>		

  <presetdef name="javadoc">
    <javadoc
        packagenames    = "net.haefelingerit.flaka.*"
        sourcepath      = "${src.dir}"
        classpathref    = "javac.classpath"
        >
      <link href="http://java.sun.com/j2se/1.5.0/docs/api" />
      <link href="http://www.jdom.org/docs/apidocs" />
      <link href="http://logging.apache.org/log4j/1.2/apidocs" />
      <link href="http://javadoc.haefelingerit.net/org.apache.ant/1.7.1" />
      <link href="http://javadoc.haefelingerit.net/net.sourceforge.cruisecontrol/2.8.2" />
      <link href="http://javadoc.haefelingerit.net/net.sourceforge.juel/2.1" />
      <link href="http://logging.apache.org/log4j/1.2/apidocs" />
      <link href="http://hc.apache.org/httpclient-3.x/apidocs" />
    </javadoc>
  </presetdef>

  
  <target name="javadoc">
    <mkdir dir="${build.dir}/javadoc" />
    <javadoc destdir= "${build.dir}/javadoc"  />
  </target>
  
  <target name="compile">
    <c:compile />
  </target>
	
  <target name="copy-resources">
    <c:copy-and-replace src="${basedir}/res" dst="${obj.dir}" />
  </target>


</project>
