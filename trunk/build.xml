<project name="flaka" default="package">
  <description>
    === This is the build script building the Flaka project from scratch ===

    Use option -p to see a list of targets. By  default, Flaka gets compiled
    and packaged as

          ${basedir}/flaka.jar

     You can then use that file to  build this project again using the Flaka
     based  build script `build.xml' if you wish, but there is no need to do
     so.
     
     Please make sure to have red the build instructions in file

         ${basedir}/README.txt

     Good Luck.
     ==========
  </description>
  <!--
      ;;
      ;; This a Ant build script.
      ;;
      ;; It shall build Flaka from scratch. Notice that you need to satisfy
      ;; some requirements. Please consult README.txt for details.
      ;;
  -->

  <!--
      =====================================================================
      >> url-depot <<
      This is the property pointing to a Maven 2 like repository to satisfy 
      dependency libraries.
      =====================================================================
  -->
  <property 
      name="url-depot" 
      value="http://download.haefelinger.it/flaka/dependencies" 
      />

  <property 
      name="src.dir" 
      value="src" 
      />
  
  <property 
      name="build.dir" 
      value="build" 
      />
  <property 
      name="lib.dir" 
      value="${build.dir}/lib" 
      />
  <property 
      name="obj.dir" 
      value="${build.dir}/classes" 
      />
  <property 
      name="javadoc.dir" 
      value="${build.dir}/javadoc" 
      />


  <!-- Define property libs.fetched if a certain file is available -->
  <available 
      file="${lib.dir}/fetched/README.txt" 
      property="libs.fetched"/>

    
  <!-- ;;
       ;; Dependencies
       ;; 
       ;; List here the dependencies. Use type = 'inline' to specify whether
       ;; the dependency gets merged with the final jar file.
  -->
  <macrodef name="fetch-required-jars">
    <sequential>
      <fetchjar 
          group="junit" 
          name="junit" 
          version="3.8.1" 
          />
      <fetchjar 
          group="jdom" 
          name="jdom" 
          version="1.0"
          type="inline"
          />
      <fetchjar 
          group="commons-httpclient" 
          name="commons-httpclient" 
          version="3.1"
          type="inline"
          />
      <fetchjar 
          group="org/apache/ant" 
          name="ant-launcher" 
          version="1.7.1" 
          />
      <fetchjar 
          group="org/apache/ant" 
          name="ant" 
          version="1.7.1" 
          />
      <!-- JUEL has not been uploaded into a Maven 2 repository yet -->
      <fetchjar 
          group="juel-impl" 
          name="juel" 
          version="2.1.1-rc4" 
          type="inline"
          />
    </sequential>
  </macrodef>


  <macrodef name="fetchjar">
    <attribute name="group" />
    <attribute name="name" />
    <attribute name="version" />
    <attribute name="type" default=""/>
    <sequential>
      <echo>fetching @{name} ..</echo>
      <mkdir dir="${lib.dir}" />
      <get src="${url-depot}/@{group}/@{name}/@{version}/@{name}-@{version}.jar" 
           dest="${lib.dir}/@{name}-@{version}.jar" 
           verbose="On"/>
      <!-- Now it gets really cumbersome with standard Ant -->
      <!-- All I want to say is that if type='inline', then I want to append some text -->
      <!-- to a file. The way to do so is to define a (unused) property depending on   -->
      <!-- that condition. Then, in the echo task below, I do add something depending  -->
      <!-- on the property's value. Notice that task echo does *not* support 'if' or   -->
      <!-- 'unless'. -->
      <condition 
          property="@{name}-@{version}.inline" 
          value="@{name}-@{version}.jar&#10;" 
          else="">
        <equals 
            arg1="@{type}" 
            arg2="inline" 
            casesensitive="true" 
            trim="true" />
      </condition>
      <echo
          file="${lib.dir}/__inline__.txt" 
          message="${@{name}-@{version}.inline}" 
          append="true" />
    </sequential>
  </macrodef>

  <target name="init" unless="libs.fetched">
    <fetch-required-jars />
    <mkdir dir="${lib.dir}/fetched/" />
    <tstamp>
      <format property="libs.fetched" pattern="dd-MM-yyyy HH:mm:ss -Z" />
    </tstamp>
    <echo file="${lib.dir}/fetched/README.txt">
      ====================================================================
      Remove this file's parent folder (or this file) to re-fetch required 
      libraries from repository.
      ====================================================================
      
      Last repository used:
      ${url-depot}

      This file has been created:
      ${libs.fetched}
    </echo>
    
  </target>

  
  <target name="clean" >
    <sequential>
      <delete dir="${obj.dir}" />
    </sequential>
  </target>

  <target name="compile" depends="clean, init">
    <sequential>
      <!-- Todo: use M2 names -->
      <mkdir dir="${obj.dir}"/>
      <javac srcdir="src" destdir="${obj.dir}">
        <classpath>
          <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
          </fileset>
        </classpath>
      </javac>
    </sequential>
  </target>

  <macrodef name="zip-merge">
    <attribute name="libfile" />
    <element name="zip-element" implicit="true"/>
    <sequential>
      <zip destfile="@{libfile}" update="true">
        <zip-element/>
      </zip>
    </sequential>
  </macrodef>

  <macrodef name="inline-dependencies">
    <attribute name="libfile" default="flaka.jar" />
    <sequential>
      <zip-merge libfile="@{libfile}">
        <zipgroupfileset dir="${lib.dir}">
          <patternset>
            <includesfile name="${lib.dir}/__inline__.txt"/> 
          </patternset>
        </zipgroupfileset>
      </zip-merge>
    </sequential>
  </macrodef>


  <macrodef name="package">
    <attribute name="distdir" default="${basedir}" />
    <attribute name="libfile" default="flaka.jar" />
    <attribute name="objdir"  default="${obj.dir}" />
    <sequential>
      <delete file="@{distdir}/@{libfile}" />
      <mkdir dir="@{distdir}" />
      <jar jarfile="@{distdir}/@{libfile}">
        <fileset dir="@{objdir}">
          <include name="**/*.class" />
          <include name="**/antlib.xml" />
        </fileset>
        <fileset dir="src">
          <include name="**/antlib.xml" />
        </fileset>
      </jar>
      <inline-dependencies />
    </sequential>
  </macrodef>

  <target name="package" depends="compile">
    <sequential>
      <package />
    </sequential>
  </target>




  <presetdef name="javadoc">
    <javadoc
        packagenames    = "it.haefelinger.flaka.*"
        sourcepath      = "${src.dir}"
        >
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath> 
      <link href="http://java.sun.com/j2se/1.5.0/docs/api" />
      <link href="http://www.jdom.org/docs/apidocs" />
      <link href="http://logging.apache.org/log4j/1.2/apidocs" />
      <link href="http://javadoc.haefelinger.it/org.apache.ant/1.7.1" />
      <link href="http://javadoc.haefelinger.it/net.sourceforge.cruisecontrol/2.8.2" />
      <link href="http://javadoc.haefelinger.it/net.sourceforge.juel/2.1" />
      <link href="http://logging.apache.org/log4j/1.2/apidocs" />
      <link href="http://hc.apache.org/httpclient-3.x/apidocs" />
    </javadoc>
  </presetdef>


  <!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->
  <!--                       J A V A D O C S                       -->
  <!--:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::-->

  <macrodef name="javadoc-exec" >
    <sequential>
      <!-- create ${javadoc} directory -->
      <mkdir dir="${javadoc.dir}"/>
      <!-- classpath set by init-deps -->
      <javadoc destdir="${javadoc.dir}" >
        <fileset dir="${src.dir}" defaultexcludes="yes"/>
      </javadoc>      
    </sequential>
  </macrodef>
  
  <target name="javadoc" depends="init">
    <javadoc-exec />
  </target>


</project>
