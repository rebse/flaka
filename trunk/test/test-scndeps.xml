<project xmlns:c="antlib:net.haefelingerit.flaka">

	<!-- install global handler to simplify life -->
	<c:install-reference-handler/>
	
  <macrodef name="dependency">
    <attribute name="alias" default="" />
    <element name="groupId" />
    <element name="artifactId" />
    <element name="version" />
    <sequential />
  </macrodef>

  <c:dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>3.8.1</version>
  </c:dependency>

  <dependency alias="log4j">
    <groupId>log4j</groupId>
    <artifactId>log4j</artifactId>
    <version>1.2.8</version>
  </dependency>

  <mkdir dir="tmp" />

  <c:scndeps var="dlist">
    <include name="test-scndeps.xml" />
  </c:scndeps>

  <c:for var="d" in=" dependencies ">
    <c:set>
      x = d.scope
    </c:set>
    <c:echo>#{x}</c:echo>
  </c:for>


  <c:echo>
    ;; we got 
    #{ dlist }
  </c:echo>
  <c:set>
    ;; like any other variable ..
    dependencies = \
    append(dependencies,dlist)
  </c:set>

  <c:for var="d" in=" dependencies ">
    <c:echo>#{d}</c:echo>
  </c:for>
  <!-- write dependencies in format alias  -->
  <c:for var="d" in=" dependencies ">
    <c:when test=" not empty d.alias ">
      <c:set>
        x = d.scope
      </c:set>
      <c:echo>
        [1] #{d.alias} | #{d.location.name} | #{d.file} | #{d.scope} | 
      </c:echo>
    </c:when>
  </c:for>
  <!-- write dependencies in format MI (maven 1) -->
  <c:for var="d" in=" dependencies ">
    <c:echo>[2] #{d.m1path}</c:echo>
  </c:for>
  <!-- write dependencies in format M2 (maven 2) -->
  <c:for var="d" in=" dependencies ">
    <c:echo>[3] |#{d.m2path}|</c:echo>
  </c:for>
  <c:echo>There are #{size(dependencies)} ..</c:echo>
  <c:for var="d" in=" dependencies ">
    <c:echo>
      [4] | #{d.location.name} | #{d.file} | #{d.scope} | 
    </c:echo>
  </c:for>
  <c:list var="repos">
    ;; my own repo
    'http://haefelingerit.net/depot'
  </c:list>

  <c:for var="d" in=" dependencies ">
    <c:for var="r" in=" repos ">
      <c:set>
        url  = concat(r,'/',d.m2path)
      	dest = 'build/lib/#{d.basename}'.tofile
      </c:set>
    	<c:when test=" not dest.exists ">
    	  <get src="#{url}" dest="#{dest}" verbose="on" />
    	</c:when>
    </c:for>
  </c:for>
</project>