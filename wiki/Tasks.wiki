#summary A summary of all Tasks implemented by Flaka
#labels Featured
<wiki:toc max_depth="2"/>

= Elementary Tasks =
<hr/>
== echo ==
This task is an extension of Ant's standard `echo` task. The following is a typical example to print the famous `Hello, World` message.
{{{
<c:echo shift=" 3*." >
  ; ignore \
  me (still a comment here) 
  Hello\
      >,
>>World.
</c:echo>
}}}

This would output

{{{
[c:echo] Hello...,
[c:echo] ......World.
}}}

Notice the support of comment and continuation lines. Furthermore, not more than two lines are printed - the _empty_ line after the opening `<c:echo>` tag is ignored. Leading whitespace is ignored. Finally, each character `>` is replaced by `...` which is `3` _times_ `.` (3*.).

=== Attributes ===

This tasks supports all attributes inherited from Ant's echo task. In addition, further supported attributes are:

|| Attribute || Type    || Default || Description ||
|| `debug`   || boolean || false   || Enables additional debug output for this particular task. As usual, such additional output will be written to stderr regardless of whether debug has been globally enabled on Ant or not. The standard Ant loggers and listeneres are ignored. The default value is `false`, i.e. no additional output is created. ||
|| `comment` || string  || `;`      || Allows for comments. The attribute's (trimmed) value is used to construct a regular expression like `^\s*{<escaped(comment)>}`. Every line matching this regular expression will not show up in the output. Notice the usage of `escaped(comment)`. This means that `comment` is interpreted as is and not a regular expression. Thus something like `[;#]` does _not_ mean either `;` or `#`. Instead it means that a line starting with `[;#]` (and possible leading whitespace) is ignored from output. By default, line starting with character `;` (like in Lisp) are ignored.||
|| `shift`   || string  || ``       || Allows to prefix each line with `shift` characters. See also Behaviour below. ||
|| `ic`      || string  || `>`       || Allows to set the indentation character (see explanation below). ||

=== Elements ===

This task accepts implicit text. Text may contain Ant property references `${..}` or [EL Flaka EL] references `#{..}`.


=== Behaviour ===

*Continuation Lines* are physical lines ending with the character sequence `\$` where `$` shall denote here the end-of-line character sequence (Unix: `LF`, Windows: `CR LF`). Such a line is continued, i.e. the line will be accumulated with the next line (which could also be a continuation line). 

A (accumulated) line starting with the characters given in attribute `comment` (perhaps lead by whitespace characters) is a *comment line*. Such lines are removed from output. Notice that continuation lines are supported on comment lines as well.

A rather anoying feature of Ant's standard task is to print the echo's text including _all_ whitespace and line ending characters. This makes pretty formatting rather cruel and worse, subject to the formatting of your favorite XML editor. To allow a *decent formatting*, a couple of features have been implemented which are presented now. Let's start with simple message:

{{{
<echo>
foobar
</echo>
}}}

Notice the usage of the standard Ant `echo` task. This would give:
{{{
[echo]
[echo] foobar
}}}
Altough the author's intention was to print a single line, standard Ant will actually print _two_ lines. In order to print a single line, one needs to write something like
{{{
<echo>foobar
</echo> 
}}}
Here we have a situation like in real life's politics. There are thousand opinions how to do it proper and finally we end up in a mess. For example, take your favorite editor and format the above and you will end up in something like
{{{
<echo>
..foobar
</echo>
}}}
To better illustrate the point, I have used `.` to indicate a whitespace character (typically either the blank or tab character). Running the _formatted_ build script again, we end up in
{{{
[echo]
[echo] ..foobar
}}}
As already mentioned, this is like politics because now we get something we definitly didn't want to have in the first place: _Two_ lines are printed and additionally those whitespace characters are popping up. Oh no ..

Let's try and see Flaka's `echo` behaviour:
{{{
<c:echo>
..foobar
</c:echo>
}}}
This ouputs 
{{{
[c:echo] foobar
}}}
and this is exactly what we want to have. Only a single line is printend and now matter how much whitespace there is in front of `foobar`, it's all discarded.

Another example where, again, character `.` indicates a whitespace character:
{{{
<c:echo>
..hello,
....world
</c:echo>
}}}
The author's intention is to have `world` intended by two characters. Again, the overall problem is that formatting this snippet with some (XML) editor will very likely remove this extra indentation level. Let's see how Flaka behaves:
{{{
[c:echo] hello
[c:echo] world
}}}
All _extra_ whitespace has been removed! Ok, that's not what we wanted. However, there is something called a `indentation character`, `ic` for short:
{{{
<c:echo ic=">">
..hello
..>>world
</c:echo>
}}}
The overall idea is simply to treat the indendentation characgter as whitespace character if appearing before the first non-whitespace character in each line. Then all leading whitespace would be discarded and all `indentation` characters would be printed as whitespace. This gives:
{{{
[c:echo] hello
[c:echo] ..world
}}}
Excellent, now our output is idempotent regarding XML formatting.

As a last wish, how about shifting the whole output by `N` whitespace characters? This is achieved by setting attribute `shift` to the desired level. For example:
{{{
<c:echo shift="2">
..hello
..>>world
</c:echo>
}}}
Notice that attribute `ic` is not used here cause `>` is the default ic character. This gives
{{{
[c:echo] ..hello
[c:echo] ....World
}}}

If you want to use a different prefix character, use `amount*character` as argument for attribute `shift` as shown below:
{{{
<c:echo shift="3*%">
        >
</c:echo>
}}}
This gives:
{{{
[c:echo] %%%
}}}

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Echo.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Echo.java Source]

<hr />
== list ==

A elementary task to create a variable containing a list of objects.
{{{
<c:list var="mylist">
  ;; each line is a EL expression
  3 * 5
  ;; each line defines a list element
  list('a',1,''.tofile)
</c:list>
}}}

=== Attributes ===

|| Attribute || Type   || Default || [EL] || Meaning ||
|| var       || string ||         ||  r   || The name of the variabled to be assigned.  ||
|| comment   || string || `,`     ||      || The comment character                      ||
|| debug     || bool   || false   ||      || Turn on extra debug information.           ||
|| el        || bool   || true    ||   no || Enable evaluation as EL expression         ||
=== Elements ===

This task may contain a implicit text element.

=== Behaviour ===

This task creates and assigns in any case a (possible) empty list, especially if no text element is present. The variable's name is given by attribute `var`. This attribute may contain references to EL expressions.

If given text element is parsed on a line by line basis, honouring comments and continuation lines. Each line will be evaluated as EL expression after having resolved `${..}` and `#{..}` references. A illegal EL expression will be discarded while the evaluation of lines continues. Turn on extra debug information in case of problems. 

The evaluation of a valid EL expression results in an object. Each such object will be added to a list in the order imposed by the lines.

A single line can't have more than one EL expressions. Thus the following example is invalid:
{{{
<c:list var="mylist">
 3 * 5  'hello, world'
</c:list>
}}}

Use attribute `el` to disable the interpretation of a line as [EL] expression:
{{{
<c:list var="mystrings" el="false">
 3 * 5
 hello, #{ 'world' }
</c:list>
}}}
This creates a list variable `mystrings` containing two elements. The first element will be string `3 * 5` and the second element will be string `hello, world`. Notice that `el="false"` does not prohibit you from using [EL#EL_References EL references].

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/List.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/List.java Source]

<hr/>
== set ==

This elementary task allows to set multiple variables and properties in one go. In addition, comments and continuation lines are allowed for additional readability and comfort.

=== Attributes ===

|| Attribute || Type || Default    || [EL] || Meaning ||
|| comment   || string || `;`      ||  no  || The comment character sequence.            ||
|| debug     || bool   || `false`  ||  no  || Turn on extra debug information.           ||

All attributes follow the rule that leading and trailing whitespace is ignored. Any attribute combination is allowed and will not result necessarily in a build error. If in doubt, turn on extra debug information.

=== Elements ===

This task accepts implicit text. Text may contain any amount of [EL] and property references references. Continuation and comment lines are supported. 

=== Examples ===

XML is not particular easy to read for humans. When assigning a couple of varables and properties, this becomes obvious. Task `set` helps to reduce the clutter. For example:
{{{
  <c:set>
    f = 'folder'
    ; turn f into a file object
    f = f.tofile
    b = f.isdir ? true : false
    ; assign a property (notice that the right side is always an EL expression)
    p := 'hello world'
    ; override a property if you dare
    p ::= "HELLO \
    WORLD"
  </c:set>
}}}

In this example, `f` is first assigned to be string `"folder"`. The comment line - the one starting with character `;` - tells what the next line is going to do: turn `f` into a file object which can then be used further (for example, to check whether `f` is a directory or not.

While character `=` is used to assign a variable, use character sequence `:=` to assign a property instead. If you dare, use `::=` to override an existing property. 

Notice that the right side of `=`, `:=` and `::=` are in any cases a EL expression. Thus when creating a property, care must be taken to quote any string properly.

=== Behaviour ===

The comment character sequence is `";"` by default. It can be changed to an arbitrary sequence using attribute `comment`. Once set, it can't be changed during the execution of this task. A comment characters are used to identify lines to be ignored from execution. Such a line is given if the first non whitespace characters of that line are identical with the sequence of comment characters. In other words, a line is being ingnored if matches the regular expression `^\s*<comment>`. The comment characters itself are not interpreted as regular expression characters. Therefore a given comment sequence like `"(#|;)"` does not mean that either `";"` or `"#"` start a comment. Instead it means that a comment line starts with the characters `"(#|;)"` which would be rather awkward (while perfectly _legal_). 

To support readability continuation lines are supported. Such a line is indicated by having `\` as last character. Be careful not to put any whitespace characters after `\`, otherwise the line will not be recognized as such. Continuation lines are also working on comments as the example above shows. If a line is a continuation line, the last character `\` is removed, the line is accumulated and the next line is read. If finally a non contination line is read (and only then), a evaluation of the so accumulated line takes place: If the accumlated line is a comment it will be ignored and otherwise either treated as property or variable assignment.

Apart from continuation lines are leading and trailing whitespace characters ignored. For example, the property assignment ` x = 'foo bar' ` will assign the string `foo bar` to property `x`. Notice that whitespace before and after `x` and before and _after_ `'foo bar'` is ignored. This is slightly different from reading Java properties where whitespace after `'foo bar'` would _not_ have been ignored!
 
When evaluating, each line is independent of other lines evaluated. Each line is evaluated in the order written. Evaluating means that the right side of the assignment is evaluated as [EL] expression and the resulting object is assigned to the variable stated on the left side. When evaluating properties, then the right side is evaluted into an object and additionally streamed into a sequence of characters (string).

Notice that it is perfectly legal to use property or variable references as the following example shows:
{{{
<c:set>
 f = '${ant.file}'
 F = '#{f}'
</c:set>
}}}

Be aware that property references are evaluated _before_ [EL] expressions. Consider:
{{{
<c:set>
  ;; let s hold string ant.file
  s = 'ant.file'
  ;; bad, f will not assigned
  f = ${#{s}}
</c:set>
}}}
The second assignment will not work as expected because, in a first step, all occurrences of `${..}` are resolved by Ant itself. In a second step, the expression `${#{s}}` will be evaluated. Since this expression is invalid, `f` will not be assigned.

Each line is evaluated in order. Therefore the following works as expected:
{{{
<c:set>
  s := '3 * 5'
  ;; defines r as 15
  r = ${s}
</c:set>
}}}

The following kind of meta programming will not work for `set`:
{{{
<c:set>
  property_or_var := condition ? '=' : ':='

  name ${property_or_var} expr
</c:set>
}}}
Reason: In a first step all continuation lines are accumulated. Then each line is taken as is an broken up in left and right part, plus assignment type. Then properties are resolved on both sides. In an additonal step, EL references are evaluated as well on both sides. Then, the right side is evaluated as EL expression and it's result is assigned to the stringized left side (whitespace chopped off).

==== Then meaning of `null` and _void_ ====

|| Assignment || Right Side || Result ||
|| `=`        || `null`     || If the right side evaluates to `null`, then the variable will be removed if existing. ||
|| `=`        || _void_     || The evaluation of an empty expression is `null`. See above how `null` is handled` ||
|| `:=`       || `null`     || Cause a _read only_ property can't be removed, nothing will happen with this assignment. The property will also not be created. ||
|| `:=`       || _void_     || Same as `:= null` ||
|| `::=`      || `null`     || Removes the property denoted by the left side ||
|| `::=`      || _void_     || Same as `::= null` ||

To illustrate, here are example behaviours:
{{{
<c:set>
 x = 3 * 5 
 ;; remove x
 x =  
 ;; remove x 
 x = null
 
 ;; set property p to '3*5' (a string)
 p := 3 * 5
 ;; ignored 
 p := null
 ;; remove property 'p'
 p ::= null
 ;; .. same as
 p ::= 
</c:set>
}}}

<wiki:comment>
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                               PROPERTIES
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
</wiki:comment>

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Set.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Set.java Source]

<hr/>
== properties == 


A task to set multiple properties in one go. It is typically used to _inline_ properties otherwise written in an additional properties file. Thus using this task reduces the clutter on your top level directory:
{{{
<c:properties>
  ; this is \
  a comment

  ; assume that variable 'foo' has been defined here and that
  ; foo.name resolves into 'foo', then the next line will set
  ; property foo to be the string `foo'.
  foo     = #{foo.name}
  ; next lines creates property `foobar' to be the string `foobar'.
  foobar  = ${name}bar
</c:properties>
}}}


=== Attributes ===

|| Attribute || Type    || Default || EL || Description ||
|| debug     || boolean || `false` || no || Turn extra debug information on || 
|| comment   || String  || `;`     || no || The character that starts a comment line || 

=== Elements ===

This task accepts a implicit text element.

=== Behaviour ===

This task is similar to [Tasks#set set]. The difference is that this task only allows to define properties while  [Tasks#set set] also supports the creation of variables. Furthermore, the right side of `=` will be literally taken as string value. This is different from [Tasks#set set] where the right side will be additionally evaluted as [EL] expression. The following example defines each property foobar, once done with task  [Tasks#set set] and once with this _properties_ task:
{{{
<c:set>
  foobar := 'foobar'
</c:set>
<c:properties>
  foobar = foobar
</c:properties>
}}}
Notice the usage of the quote character `'` in the former example and the absence of it in the latter.

Task _properties_ supports, like task [Tasks#set set] does, continuation lines and comments. Furthermore, variable references `#{..}` and property references `${..}` are resolved on both sides of `=`.

If the right side is empty, then no property will be created and an existing property will not be changed. If the right side is `null`, a property with string value `null` will be assigned if the property does not already exist (this is very much different than when using task [#set set] to create properties.

Leading and trailing (!) whitespace characters are ignored. This is different from standard Ant where trailing whitespace is significant (and responsible for unexpected and hard to track script behaviour).

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Properties.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Properties.java Source]

<hr/>
== unset ==

The unset statement allows the removal of properties. Use this task with care as properties are not meant to be changed during execution of a project. 

{{{
 <c:unset>
   p1
   ;; use embedded EL references for dynamic names
   p#{ index }
 </c:unset>
}}}

This example demonstrates how to remove properties `p1` and a property whose name dependes on the curent value of `index`. 

=== Attributes ===
|| Attribute || Type    || Default || EL || Description ||
|| debug     || boolean || `false` || no || Turn extra debug information on || 
|| comment   || String  || `;`     || no || The character that starts a comment line || 

=== Elements ===

This element accepts implicit text.

=== Behaviour ===

Each non comment line defines a property name to be removed. The property does not need to exist to be removed. User properties (i.e. given by command line) and system properties (i.e. `ant.file`) are also removed.

Comment lines and empty lines are ignored. Continuation lines, i.e. lines ending in `\` but not in `\\`, are accumulated before being processed.

References to properties `${..}` and expressions `#{..}` are resolved.

The content of a line defines the property name, for example:
{{{
<c:unset>
 ;; property 'foo bar', not 'foo' and 'bar'
 foo bar

 ;; a line is *not* a EL expression (this will be property '3 * 5')
 3 * 5

 ;; use #{..} references for dynamic content (this will be 'p15')
 p#{3*5}
</c:unset>
}}}

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Unset.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Unset.java Source]

<hr/>
== rescue ==

Task `rescue` is essentially a container for an arbitrary number of tasks. In addition, it allows to rescue variables and properties.

{{{
<c:rescue>
 <vars>
   foo
 </vars>
 <properties>
   bar
 </properties>
 task_1
   ..
 task_N
<c:rescue>
}}}

No matter what will happen with property `var` and variable `foo` within `sequential`, this will be unoticable outside of `rescue` cause the values (or better: state) will be restored after having executed all embedded tasks. This will of course also work in case an exception is thrown by one of the tasks.

=== Attributes ===

This task does not define attributes.

=== Elements ===

|| Name    || Cardinality || Description ||
|| `vars`  || 0..1        || Defines a [#list list] of variable names. Attributes and behaviour is that of task [#list list] except that interpretation of lines as [EL] expressions are disabled. ||
|| `properties` || 0..1   || Defines a [#list list] of property names. Attributes and behaviour is that of task [#list list] except that interpretation of lines as [EL] expressions are disabled. ||
|| _task_  || arbitrary   || A (arbitrary) task or macro to be excecuted ||

=== Behaviour ==

Executes all embedded tasks. Variables and properties listed in `vars` and `properties` are restored to their previous state, i.e. if not existing before the execution, they will not exist afterwards. If existed, their value will be restored.

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Rescue.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Rescue.java Source]

<hr/>
= Looping =
== while ==
A task implemening a `while` loop:
{{{
<c:set>
  i = 3
</c:set>
<c:while test=" countdown >= 0 ">
  <c:echo>#{countdown > 0 ? countdown : 'bang!' }</c:echo>
<c:while>
}}}

=== Attributes ===

|| Attribute || Type   || Default || EL    || Description ||
|| `test`    || string || `false` || expr  || The condition for looping as [EL] expression ||

=== Elements ===

 The body of this task may contain an arbitrary number of tasks or macros.

=== Behaviour ===

All tasks listed as elements are executed as long as the [EL] expression evaluates to `true`. 

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/While.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/While.java Source]
 * [Tasks#break break] to stop the iteration
 * [Tasks#continue continue] to hide tasks from being executed during a iteration step.
 * See also [BasicScriptingConstructs#Looping Looping] for an introduction to looping in Flaka

<hr/>
== for == 

A task that implements a loop statement. Iterating over a list of _objects_:

{{{
 <c:for var="x" in=" list('a', 2, 'src'.tofile, typeof(list())) ">
   <c:echo>
      #{x}
   </c:echo>
 </c:for>
}}}

=== Attributes ===

|| Attribute || Type   || Default || EL    || Description ||
|| `var`     || string ||         || #{}   || The variable holding each loop item. This variable can be referenced within the body like `#{var}` where `var` is the string used in this attribute. If not used, then no iteration takes place and no warning is issued. Notice that you can use `#{..}` only in [EL] enabled tasks. ||
|| `in`      || string ||         || expr  || The items to be iterated over as [EL] expression. A iteration takes place except if `null` is the evaluation result. Otherwise, if the evaluation result is _not iterable object_, a temporary list containg that object is created on the fly. Iteration takes then place over that list and otherwise over the iterable collection. ||

=== Elements ===

 The body of this task may contain an arbitrary number of tasks or macros.

=== Behaviour ===

This is the shortest possible for statement. It's legal albeit completely useless.
{{{
 <c:for />
}}}

<wiki:comment>
TODO: document behaviour
</wiki:comment>

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/For.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/For.java Source]
 * Task [Tasks#for for] 
 * Task [Tasks#break break]
 * Task [Tasks#continue continue]
 * Quickref [BasicScriptingConstructs#Looping Looping] for an introduction to looping in Flaka

<hr/>
== break == 

A task mirroring a break statement. When used within a [Tasks#for for]-loop, the loop will be terminated. If this task is used outside of a [Tasks#for for]-loop, a build exception will be thrown.

{{{
  <c:for var="i" in=" list(1,2,3,4,5,6) ">
    <c:echo>i = #{i}</echo>
     <c:when test=" i == 3 ">
       <c:break />
     </c:when>
  </c:for>
}}}
Being executed, the following will be dumped on stdout:
{{{
[c:echo] i = 1
[c:echo] i = 2
[c:echo] i = 3
}}}

=== Attributes ===
|| Attribute || Type || Default || [EL] || Description ||
|| `test`    || string || -     || expr || Terminate loop when [EL] expression evaluates to `true` ||
|| `if`      || string || -     || #{}  || Terminate if property exists ||
|| `unless`  || string || -     || #{}  || Terminate if property does not exist ||

=== Behaviour ===

When used without any attributes, the surrounding [Tasks#for for] or [Tasks#while while] loop will terminate at once. When used with attributes, then the loop will terminate if at least one attribute evaluates to `true`. Otherwise, the loop will not be terminated and continues as usual.

The example given above can thus be shortened to 
{{{
  <c:for var="i" in=" list(1,2,3,4,5,6) ">
    <c:echo>i = #{i}</echo>
    <c:break test=" i == 3 " />
  </c:for>
}}}

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Break.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Break.java Source]

<hr/>
== continue == 

A task mirroring a continue statement. When used within a [Tasks#for for]-loop, the loop will be continued with the next loop item (i.e. any statements after task continue are ignored). If this task is used outside of a for-loop, a build exception will be thrown.

{{{
 <c:for var="i" in=" list(1,2,3,4,5,6) ">
   <c:when test=" i > 3 ">
     <c:continue />
   </c:when>
   <c:echo>i = #{i}</echo>
  </c:for>
}}}

This would print:

{{{
[c:echo] i = 1
[c:echo] i = 2
[c:echo] i = 3
}}}

=== Attributes ===
|| Attribute || Type || Default || [EL] || Description ||
|| `test`    || string || -     || expr || Continue loop when [EL] expression evaluates to `true` ||
|| `if`      || string || -     || #{}  || Continue if property exists ||
|| `unless`  || string || -     || #{}  || Continue if property does not exist ||

=== Behaviour ===

When used without any attributes, the surrounding [Tasks#for for] or [Tasks#while while] be continued while following tasks or macros are ignored in the current iteration step. When used with attributes, then the loop will be continued if at least one attribute evaluates to `true`. Otherwise, the subsequent tasks or macros are executed.

The example given above can thus be shortened to 
{{{
 <c:for var="i" in=" list(1,2,3,4,5,6) ">
   <c:continue test=" i > 3 " />
   <c:echo>i = #{i}</echo>
</c:for>
}}}

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Continue.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Continue.java Source]
 * Task [Tasks#for for] 
 * Task [Tasks#break break]

<hr/>

= Conditional Tasks =

== when == 

Task when represents a else-less if statement. The following example dumps the content of a file to stdout via Ant's echo task if the file exists.

{{{
 <c:when test=" 'path/to/file'.tofile.isfile" >
   <c:set var="fname" property="true" value=" f " />
    <loadfile property="__z__" srcFile="${fname}"/>
    <echo message="${__z__}" />
 </c:when>
}}}

Note that the example is bit artificial cause Ant's loadfile task is sufficient. 


=== Attributes ===
|| Attribute || Type   || Default || EL    || Description ||
|| `test`    || string || `false` || expr  || A [EL] expression that must evaluate to `true` in order to execute the body of this if statement. ||

=== Elements ===

 * Any tasks or macro instances.

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/When.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/When.java Source]

<hr/>
== unless ==

This task is the logical opposite of task [Tasks#when when]. It's body is only executed if the condition evaluates to false. See [Tasks#when when] for details. This example shows how to create a folder named libdir if such a folder does not already exist.

{{{
 <c:unless test=" 'libdir'.tofile.isdir ">
  <mkdir dir="libdir" />
 </c:unless>
}}}

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Unless.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Unless.java Source]

<hr/>
== choose == 

A task implementing a series of _ifelse_ statements, i.e. a generalized _if-then-else_ statement.

=== Attributes ===
|| Attribute   || Type     || Default || EL || Description ||
|| _when_.test || string   || `false` ||  = || A EL condition. When `true` corresponding clause will be executed. ||
|| _unless_.text || string || `true`  ||  = || A EL condition. When `false` corresponding clause will be executed. ||
|| debug       || boolean  || `false` ||  = || Turn on extra debug information. ||

=== Elements ===
|| Element   || Cardinality || Description ||
|| when      || infinite    || To be executed if condition evaluates to `true` ||
|| unless    || infinite    || To be executed if condition evaluates to `false` ||
|| otherwise || [0,1]       || To be executed if no `when` or `unless` clause got executed ||
|| default   || [0,1]       || Synonym for `otherwise` ||

=== Behaviour===

Each `when` and `unless` clause's conditions are evaluated in order given until a claus get's executed. Then, further processing stops ignoring all further elements not taken into account so far. If no `when` or `unless` clause got executed, then a present `otherwise` or `default` clause gets executed.

The shortest possible `choose` statement is
{{{
 <c:choose />
}}}

It's useless and does nothing, it's completely harmless.

The following example would execute all macros or tasks listed in the `otherwise` clause cause no `when` or `unless` clause got executed.
{{{
 <c:choose>
  <otherwise>
    <!-- macros/tasks -->
  </otherwise>
 </c:choose>
}}}

This would execute all macros and tasks listed in the otherwise clause since no when clause got executed.
{{{
 <c:choose>
   <when test=" true == false" >
     <echo>new boolean logic detected ..</echo>
   </when>
   <unless test=" 'mydir'.tofile.isdir ">
     <echo> directory mydir exists already </echo>
   </when>
   <otherwise>
     <echo> Hello,</echo>
     <echo>World</echo>
   </otherwise>
 </c:choose>
}}}


=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Choose.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Choose.java Source]

<hr/>
== switch ==

Task `switch` has been designed to ease pattern matching. The idea is to try to match a pattern, a [http://en.wikipedia.org/wiki/Regular_expression regular expression] or [http://en.wikipedia.org/wiki/Glob_(programming) glob expression] against a given string value and carry out a sequence of actions in case of a hit.

{{{
 <c:switch value=" a${string}#{value} ">
  <matches glob="*.jar">          -- #1
   -- string ending in .jar
  </matches>
  <matches re="1|2|3">            -- #2
    -- one or two or three
  </matches>
  <matches re="-\d+">             -- #3
    -- negative integral number
  </matches>
  <otherwise>
   -- no match so far ..
  </otherwise>
 <c:case>
}}}

Notice the usage of a glob expression in the first and the usage of regular expressions in the second and third `matches` element. Utilization of glob and regular expressions make `switch` a very flexible and powerful conditional statement.

=== Attributes ===
|| Attribute || Type   || Default || [EL]  || Description ||
|| `value`   || string ||       - || #{..} || The (string) value that needs to be matched against. Note that the value given is _normalized_, i.e. leading and trailing whitespace is removed. Whitespace characters are controlled by the underlying implementation which is Java in this case.||
|| `var`     || string ||       - || #{..} || Save details of this match as `matching object` using the variable name given. See [EL#Matcher_Properties matcher properties] for a list of available properties; see also below for examples. ||
|| `ignorecase` || bool || false  ||    no || Enables case-insensitive matching. By default, case-insensitive matching assumes that only characters in the US-ASCII charset are being matched. Unicode-aware case-insensitive matching can be enabled by specifying the UNICODE_CASE flag in conjunction with this flag. Case-insensitive matching can also be enabled via the embedded flag expression `(?i)` || 
|| `comments`   || bool || false  ||    no || Permits whitespace and comments in pattern. In this mode, whitespace is ignored, and embedded comments starting with # are ignored until the end of a line. Comments mode can also be enabled via the embedded flag expression `(?x)` || 
|| `dotall`     || bool || false ||     no || In dotall mode, the literal `.` matches any character, including a line terminator. By default this expression does not match line terminators. Dotall mode can also be enabled via the embedded flag expression `(?s)`, where `s` is a mnemonic for _single-line_ mode, which is what this mode is called in [http://en.wikipedia.org/wiki/Perl Perl]. || 
|| `unixlines`  || bool || false  ||    no || In this mode, only character `LF` is accepted as line terminator character when using `.`, `^`, and `$`. Unix lines mode can also be enabled via the embedded flag expression (?d). || 
|| `multiline`  || bool || false || no || In multiline mode, the literals `^` and `$` match just after or just before, respectively, a line terminator or the end of the input sequence. By default these expressions only match at the beginning and the end of the entire input sequence. Multiline mode can also be enabled via the embedded flag expression (?m). ||
|| `debug`      || bool  || false ||   no || Turn on extra debug information ||
|| _matches_.`re` || string ||    || #{..} || Element `matches`: Specify a matching pattern as regular expression. ||
|| _matches_.`pat` || string ||   || #{..} || Element `matches`: Specify a matching pattern as glob expression ||

Note that each `switch` attribute (but `value`) can be applied to a `matches` element. Applied on `switch` has the effect of providing the default value for subsequenct `matches` elements.

=== Elements ===

|| Element   || Cardinality || Description ||
|| `matches` || 0..infinity || An element to specify a single regular or a glob expression. This element supports all the attributes of the enclosing `switch` (but `value`). It may contain any number of tasks or macros as sub elements. They are carried out if the expression matches. ||
|| `default` || 0..1        || The default statement will be executed if no `matches` element matched the input value. This element is optional. This element can only be specified once. A build exception will be raised if used more than once. This element does not accept any attributes.  It may contain any number of tasks or macros as sub elements. They are carried out if no expression matched. ||
|| `otherwise` || 0..1     || This element is a synonym for element `default` ||

=== Behaviour ===

Attribute `value` is the basis for all further matching. It is a string value which may contain [Glossary#Property_Reference references to properties] or [Glossary#Expression_Reference EL expressions]. Leading and trailing whitespace will be discarded after having resolved all references. 

All other attributes (see above) are default values for subsequent `matches` elements. For example, setting attribute `debug` to `true` will turn on debug on all `matches` elements.

Any number of `matches` elements are allowed and at most one `otherwise` (resp. `default`) element. Whether the `otherwise` element is at the end, in the middle or at the begin does not matter. The order of the `matches` elements are relevant however. Each `matches` element will be tried in the order given until no more untried elements are left. Then, if no element matched, a given `otherwise` element is carried out. Otherwise the matching elment will.

Carrying out an element means that all enclosed tasks or macros are executed in the order given. 

The underlying regular expression engine is the one given by Java. It's [http://java.sun.com/j2se/1.5.0/docs/api/java/util/regex/Pattern.html Javadoc] documentation is a pretty good source of information if you are familiar with regular expressions. For all the gory details, have a look at [http://oreilly.com/catalog/9780596528126/index.html Mastering Regular Expressions] by Jeffrey E. F. Friedl. 

Be aware that there is no need to escape the escape character. For example, people using regular expressions in Java are used to write `\\*` if they want match the literal `*` character and thus escaping from the usual semantics (match zero or more times). This is not necessary in Flaka where the input sequence `\*` remains `\*`.

So called _globs_ are a kind of simplified regular expressions. They lack the full power while simplifying the expression. For example, to specify whether a name input string end in `jar`, we can simply write 

{{{
 <c:switch value=" #{myfile}.name ">
  <matches glob="*.jar">
    -- do something with jar file ..
  </matches>
 </c:switch>
}}}

The very same can also be expressed as `re="\.jar$"` using regular expressions. The biggest disadvange of globs are that capturing groups are not supported. Thus the match above just indicates that the file name ends in `.jar` while there is nothing to figure the file's basename. Compare this with 

{{{
 <c:switch value=" #{myfile}.name ">
  <matches re="^(.*)\.jar$" var="m">
    <c:echo>
      basename = #{m[1]}
    </c:echo>       
  </matches>
 </c:switch>
}}}

Here we use a capturing group for the basename. A matcher object will be associated with variable `m`. This object can then be [http://code.google.com/p/flaka/wiki/EL#Matcher_Properties evaluated using properties] for matching details.

Here is a more complicated example. It was used once to examine a CVS tag which was supposed to follow the convetion `schema-(env_)version`, where `(env_)` was optional, `schema` indicated the tag's semantic and where `version` was the products version or build number: 
{{{
 <c:switch value="v-uat_3_20_500" var="m">
   <matches re="v-(?:([^\d][^_]*)_)?(\d.*)" >
     <c:echo>
       pattern      = #{m.p}         -- v-(?:([^\d][^_]*)_)?(\d.*)
       groups       = #{m.n}         -- 2
       matched text = #{m}           -- v-uat_3_20_500  (same as m[0])
       env          = #{m[1]}        -- uat
       version      = #{m[2]}        -- 3_20_500
       ;; refering to non existing group
       ??           = #{m[3]}        -- (empty string)
       ;; start and end index of first group
       start        = #{m[1].s}      -- 2
       end          = #{m[1].e}      -- 5
     </c:echo>
   </matches>
 </c:switch>
}}}

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Switch.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Switch.java Source]

= Exception Handing =

<hr/>
== fail ==

This task has been derived from [http://ant.apache.org/manual/CoreTasks/fail.html Ant's standard fail task]. All attributes and elements are supported. When defining a message however, EL references can be used:
{{{
<c:fail message="illegal state #{whichstate} seen" />
}}}
Furthermore, attribute `test` has been added. The value of `test` will be evaluated as EL expression in a boolean context. Being `true`, fail will throw a build exception. When used in this way, `<c:fail test='expr' />` behaves exactly the same as
{{{
<c:when test="expr">
 <fail />
</c:when>
}}}

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Fail.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Fail.java Source]

<hr/>
== trycatch == 

A task mirroring try-catch-finally exception handling found in various languages.

All tasks inside try are executed in order. If an exception is thrown by one of tehm, then several things may happen:

 * If there is a matching catch clause, then all tasks in that clause are executed. If there isn't a catch clause, the exception will be passed to the enclosing environment (except if an exception is also thrown in the finally clause - see below).
 * An optional finally clause is always executed, regardless of whether an exception gets thrown or or whether a try or catch clause exists.
 * If a property is set, then that property will hold the message of the exception thrown in a try clause. If a reference is given, then that reference will hold the exception object thrown in the try clause. If an exception is also thrown in a catch or finally clause, then neither will the property or reference update nor set.
 * If a exception is thrown in a matching catch clause and in a finally clause, then the latter will be passed to the enclosing environment and the former will be discarded.

A catch clause can be given a type and a match argument. Both arguments expect a regular or pattern expression. A catch clauses matches if the type and match matches. The type argument is matched against the classname of the thrown exception. The match argument is matched against the exception message (if any). Both default values ensure that a build exception thrown by Ant is caught while an implementation dependent exception passes.

When matching against the error message, be aware that the actual error message might be slightly different from the actual message given: usually the error message contains also information about where the exception got thrown. It is therefore wise to accepted any leading and trailing space. For example:

{{{
 <c:trycatch>
  <try><fail message="4711" /></try>
  <catch match="4711">
    -- does (very likely) not match
  </catch>
  <catch match="4711*">
    -- neither this one ..
  </catch>
  <catch match="*4711">
    -- bon chance
  </catch>
  <catch match="*4711*">
    -- this is it!
  </catch>
 </c:trycatch>
}}}
  

=== Attributes ===

|| Attribute || Type || Default || [EL] || Description ||
|| `property` || string || || no || The name of the property that should hold the exception message ||
|| `reference` || string || `trycatch.object` || no || >The name of the reference to hold the exception object ||
|| `catch.type` || glob || `*.BuildException` || no || A pattern against the type (Java classname) of the exception object ||
|| `catch.match` || glob || `*`  || no || A pattern to be applied against the exception message ||

=== Elements ===

 * try<br /> A task container to hold tasks and macros to be given a try. 
 * catch<br /> A task container to be executed if an exception gets thrown
 * finally<br/> A task container to be executed in any case

Note that all elements are optional. However, if there's no try element, then there's no chance to execute catch at all, so this constellation does not make too much sense. The optional finally clause will be executed regardless of whether a try clause exists or not.

It is allowed to have more multiple try, catch or finally clauses and further does the oder in which they appear not matter. Be aware though that eventually all try and finally clauses are merged into one try resp. finally clause.


=== Behaviour ===

The following snippet demonstrates the usage of trycatch:

{{{
 <c:trycatch property="reason">
   <try>
     <echo>1st try ..</echo>
   </try>
   <try>
     <echo>2nd try ..</echo>
     <fail message="fail within 2nd try" />
   </try>
   <try>
     <fail message="fail within 3rd try" />
   </try>
   <catch type="*.BuildException" match="*">
     <echo>..caught : ${reason}</echo>
   </catch>
   <finally>
     <echo>..finally</echo>   
   </finally>
 </c:trycatch>
}}}

Giving:

{{{
    [echo] 1st try ..
    [echo] 2nd try ..
    [echo] ..caught : fail within 2nd try
    [echo] ..finally
}}}


=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Trycatch.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Trycatch.java Source]

<hr/>
== throw ==

A task to re-throw a previously thrown exception. If no exception has been thrown before, a new exception is thrown. In that case, throw acts like standard fail task .

Note that throw would re-throw the last thrown exception - regardless of the current context. The following would therefore work:

{{{
 <c:trycatch>
  <try> 
    <fail message="4711" />
  </try>
  <catch>
    -- handle the exception ..
  <catch>
 </c:trycatch>
 ..
 .. -- very much later
 .. 
 <c:throw /> -- re-throws "4711" exception!!!
}}}

=== Attributes ===
|| Attribute || Type || Default || [EL] || Description ||
|| `reference` || string || `trycatch.object` || no || The name of the reference holding the previously thrown exception ||
|| `var` || || || no || Same as reference ||

=== Behaviour ===

A typical usage example:

{{{
 <c:trycatch>
  <try> ..<fail message="4711"/> </try>
  <catch>
    <echo>caught exception ..</echo>
    <c:throw />
  </c:catch>
 </c:trycatch>
}}}

When being executed, Ant would receive a build exception (re-thrown within the catch clause) containing "4711" and terminate.

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Throw.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Throw.java Source]
 * Task [Tasks#trycatch trycatch]


<hr/>
= Special Purpose Tasks =
== export == 

Use this task to dump a file within the Flaka package to stdout or a file.  This task's usefulness is rather limited for public use, however this task is used to implement target [Targets#export export].  

=== Attributes ===
|| Attribute || Type || Default || [EL] || Description ||
|| `dst`     || string || (stdout) || no || The destination to dump the file to. If dst is `-` the file will be dumped to stdout. ||
|| `src`     || string || antlib.xml || no || The file within the package to export. By default, file antlib.xml is exported. ||
|| `tee`     || bool   || false     || no || If enabled, the file will be exported to src as well as to stdout (similar as standard UNIX command tee does). ||

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Export.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Export.java Source]

<hr/>
== find == 
<wiki:comment>todo:references</wiki:comment>

Ant lacks a simple task to report all or certain files in a folder. This task lets you evaluate an arbitrary [http://ant.apache.org/manual/CoreTypes/fileset.html fileset] into a list of `file`s. Used in conjunction with [Tasks#for task for] enables you to print easily all files and properties of them. Of course, that generated list can also be used for other purposes.

{{{
<c:find var="filelist" type="f" />
<c:for var="file" in="filelist">
 <c:echo>
  #{file} has been last accessed at #{file.mtime}
 </c:echo>
</c:for>
}}}

=== Attributes ===

|| Attribute || Type   || EL || Meaning || Default ||
|| dir       || string ||  = || The directories to scan. || Basedir of build script (''.tofile) ||
|| type      || string ||    || `f` to select files and `d` to select folders || all files and folders ||
|| var       || string ||  r || The name of the variable to hold a list of scanned files or folders || null ||

=== Elements ===

This task implements a [http://ant.apache.org/manual/CoreTypes/fileset.html standard Ant fileset]. All elements of `fileset` are therefore legal elements of `find` as well.

=== Behaviour ===

This task scans all files and folders given by attribute `dir` into a variable given by `var`. If `var` is empty, then no scanning takes place. Attribute `var` may contain [EL#EL_References EL references] which are resolved. If a scanning takes place, then `var` will be created and contains, in any case, a list value.

Attribute `dir` may contain [EL#EL_References EL references] which are resolved. The so resolved string value must be a syntatically legal EL expression. This expression will then be evaluated. If the evaluated object is a list, then each list item will be scanned for files and folder, otherwise only the evaluated object. If such a object to be scanned is not already a file object, then stringized object is used to create the folder to be scanned. The following examples illustrate this behaviour:
|| Argument           || Same as ||
|| 'src'              || list('src'.tofile) ||
|| list('src','lib')  || list('src'.tofile,'lib'.tofile) ||

Attribute `type` is used to filter out unwanted files or folder from being scanned. If `type` is `f`, then only files are taken into account and when `d`, only folders matter. By default files and folders are accumulated.

=== Examples ===

Report all files in the working directory. Note that also files in sub folders are reported.

{{{
 <c:find var="filelist" type="f" />
}}}

Check whether a sub folder ending in '.jar' exists which is not a file but a directory.

{{{
 <c:find var="filelist" type="d">
   <include name="**/*.jar" />
 </c:find>
}}}
 

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Find.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Find.java Source]

<hr/>
= Meta Programming =
== run-macro == 

A task to invoke a macro or task (or a list of them) dynamically. 

{{{
 <macrodef name="foobar" >
  <sequential>...</sequential>
 <macrodef>
 ..
 ..
 <foobar />                     -- conventional way of using macro foobar
 <c:run-macro name="foobar" />  -- dynamic way
}}}

The current version does not support calling macros or tasks with arguments. 

=== Attributes ===

|| Attribute || Type || Default || EL || Description ||
|| `name`    || string ||       || no || The name of the macro to run. Use whitespace chars to specify a list of names.||
|| `fail`    || bool   || false || no || Whether a exception shall be thrown if macro does not exist||

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Run-macro.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Run-macro.java Source]

<hr/>
== run-target == 

A task to invoke a target dynamically.

=== Attributes ===
|| Attribute || Type || Default || [EL] || Description ||
|| `name ` || string || || no || The name of the target to invoke. ||
|| `fail ` || bool || `false` || no || Fail if target does not exist ||

=== Example ===

{{{
 <target name="foobar">
   ..
 </target>
 ..
 <c:run-target name="foobar" />
}}}


=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Run-target.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Run-target.java Source]


<hr/>
== create-target ==

Use this task to create a dynamic target within the current project. Usually targets are declaratively written within a build file. The following target

{{{
 <target name="foo" depends="bar" description="do foo">
   <foo-task />
 </target>
}}}

can also be written as

{{{
 <c:create-target name="foo" depends="bar" description="do foo" task="foo-task" />
}}}

Note: The current version allows only the specification of one task or macro within the body of the target to be created (like foo-task above).

=== Attributes ===
|| Attribute || Type || Default || [EL] || Description ||
|| `name` || string || || no || The name of the target to create. If override is false, an already existing target with that name is not created.||
|| `task` || string || || no || The task or macro to execute||
|| `description` || string || || no || The informal description of this target||
|| `depends` || string || || no || Targets to execute before this target||
|| `override` || bool || `false` || no || Whether to override an existing target.||


=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Create-target.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Create-target.java Source]
<hr/>


== set-default-target == 

A task to define the project's default target. 
{{{
 <project xmlns:c="antlib:ant.epoline" default="this">
    <c:set-default-target name="foobar" override="true"/>
    ..
    <target name="foobar">
       ..
    </target>
 </project>
}}}
This example changes the default target to be called from this to foobar.


=== Attributes ===
|| Attribute || Type || Default || EL  || Description ||
|| `name`    || string ||       ||  no || The name of the target ||
|| `fail`    || bool   || false ||  no || Whether to throw an exception if target does not exist||
|| `override`|| bool   || false ||  no || Whether to override an already existing default target ||


=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Set-default-target.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Set-default-target.java Source]

<hr />
= XML Support =
== xmlmerge == 

A simple task to merge XML files. 

=== Attributes ===
|| Attribute || Type || Default || [EL] || Description ||
|| `dst` || string || - || no || The file to write to. Any intermediate folders are created. writes to stdout if empty string or argument - is given.||
|| `src` || string || || no || A file or folder argument. If a folder is given, then any file therein matching a given pattern is merged, otherwise the file given. A relative argument is interpreted as being relative to the current working directory.||
|| `pattern` || regex || `.*\\.xml`|| no || The pattern to apply when matching files to be merged. The pattern can be a regular expression ||
|| `root` || || string || no || By default the root tag of the first element will be the root tag for the merged content. Use attribute root to specify a different root tag.||

=== Behaviour ===

Assume that folder xmldir contains two files x.xml and y.xml where x.xml looks like

{{{
 <x>
  <x>This is X/x</x>
 </x>
}}}

and where y.xml looks similar. Then the following invocation gets:

{{{
 <c:xmlmerge dst = "-" src = "xmldir" pattern = "*.xml" root = "myroot" />
 <?xml version="1.0" encoding="UTF-8"?>
 <myroot>
 <X>
   <x>This is X/x</x>
 </X>
 <Y>
   <y>This is Y/y</y>
 </Y>
 </myroot>
}}}

The same setup as before gives, when no root element is applied, the following:

{{{
 <c:xmlmerge dst = "-" src = "xmldir" pattern = "*.xml" />
 <?xml version="1.0" encoding="UTF-8"?>
 <X>
   <x>This is X/x</x>
   <Y>
     <y>This is Y/y</y>
   </Y>
 </X>
}}}

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/XmlMerger.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/XmlMerer.java Source]


<hr/>
<wiki:comment>
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
                                         UNDER DEVELOPMENT
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
</wiki:comment>

= Under Development - not yet ready =
== component-handler == 

A simple task to install or uninstall a special component handler supposed to get rid of some annoying Ant warning messages.

=== Attributes ===
 * install<br />Install component handler [true]
 * uninstall<br />Uninstall component handler [false]
 * fail<br />Whether to fail if the installation or un-installation can't be carried out.

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Component-handler.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Component-handler.java Source]




<hr/>
== cvsstat == 

This task is similar to using `cvs stat -v file`.

If no file argument is given, the current build script is investigated. All CVS related details are stored in properties
prefixed with a stem. CVS details reported are:
 * cvsfile The base name of the investigated file (the 1st column in file CVS/Entries)
 * cvsrev  The revision number (the 2nd column in file CVS/Entries)
 * cvsdate The date of last checkin in format Fri Mar 4 17:43:27 2006  (the 3rd column in file CVS/Entries)
 * cvsstag The sticky tag (the 5th column in file CVS/Entries) 
 * cvsdir  The folder within the CVS repository (Content of file CVS/Repository)
 * cvsroot The CVSROOT used (Content of file CVS/Root)
 * cvstag  Content of file CVS/Tag if existing and if a normal tag (first character must be N)

If an error occurs, for example because the file is not under CVS control or because unexpected content has been detected, then
property stem.error is set in any case (also if fail has been set to true) and the error message is given by that
property.

It is an error to query for a file not under CVS control. Especially in such a case where a folder named CVS exists but the file in
question is not listed in CVS/Entries.

All mentioned stem properties are cleared (i.e. undefined) if this task is being invoked (the exception from this rule are user defined properties which are never undefined). This can be changed by setting property preserve to true. Note that property  stem.error is exempted from this rule and will always be cleared.

=== Attributes ===
 * file, path, arg<br />The name of the file to be investigated. That file must be checked out under CVS control [${ant.file}]
 * stem<br />The prefix to be used for saving properties [cvsstat]
 * fail<br />If true, throw a build exception if not possible to carry out cvs stat
 * preserve<br/>If true, then a property is not set if already defined (regardless whether the  property is empty or not)[false]

=== Examples ===

Assume that file build.xml is to be investigated. The file shall be under CVS control. This shall be the content of the CVS file (related to build.xml - other stuff skipped):



|| *File || *Content ||
|| CVS/Entries || /build.xml/1.49.2.3/Fri Nov  2 14:31:03 2007//Tv-2_1_8 ||
|| CVS/Root    || :pserver:me@cvshost:/cvsroot ||
|| CVS/Repository || foo/bar ||
|| CVS/Tag     || _N/A_ ||

Then

{{{
 <c:cvsstat path="build.xml" stem="c" />
}}}

would set the following properties:

{{{
 c.cvsfile  = build.xml
 c.cvsrev   = 1.49.2.3
 c.cvsdate  = Fri Nov  2 14:31:03 2007
 c.cvsstag  = v-2_1_8
 c.cvstag   = v-2_1_8
 c.cvsdir   = foo/bar
 c.cvsroot  = :pserver:me@cvshost:/cvsroot
}}}



=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Cvsstat.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Cvsstat.java Source]

<hr/>
== getdeps ==

A task to retrieve dependencies.

The task scans for Maven style dependencies by default in the current build script. Alternatively, a comma separated list of files can be specified via attribute src. Scanning stops if at least one dependency was located, remaining files specified via src are then not further investigated. It is not regarded as an error if no dependency is located at all. 

A dependency is just recognized by it's element name. Therefore something like

{{{
 <dependency />
}}}

will be accepted as dependency when scanning. Note also that the namespace does not matter.

Each dependency will be looked up on a list of depots. A list of depot URLs can be given via attribute depotlist. If not used, then property jdepot.csv will be used. Any valid URL might be specified. Furthermore, local folder like build/lib or /var/depot will be converted into file URLs, i.e. file://localhost/build/lib and file://localhost//var/depot respectively.

A dependency is supposed to be composed of a groupId, a artifactId and a version. When looking up a dependency on a depot, the following paths (simplified) are tried:

 * {groupId}/jars/{artifactId}-{version}.jar  -- Maven I style
 * {groupId}/{artifactId}/{artifactId}-{version}.jar -- Maven II style

A dependency element may also use a name attribute. Such a attribute is interpreted as the logical name of a dependency. When being used, a [[Baseline]] file must be specified via attribute baseline. The logical name is then looked up in the Baseline and, if present, provides default values for groupId, artifactId, version and other dependency properties. Each of this properties can be overridden by an appropriate attribute or element. For example, the following dependency

{{{
 <c:dependency alias="log4j">
   <version>1.2.9</version>
 </c:dependency>
}}}

is defined in terms of a logical dependency defined in a Baseline. However, the version to be taken should not be the one specified by the Baseline but rather version 1.2.9.


=== Attributes ===
 * baseline <br />The Baseline to use when resolving aliased dependencies. Optional, []
 * src <br /> The comma separated list of files to scan for dependencies [${ant.file}]
 * dst <br /> The folder to save retrieved dependencies [.]
 * depotlist <br />The (comma separated) list of depots to retrieve dependencies from. If not given, property jdepot.csv will be looked up. If still not given, an exception will be thrown. 
 * stem <br />A prefix to be used when setting various property or reference names

=== Example I ===

Assume that the following dependency is specified in the current build script (${ant.file})

{{{
  <c:dependency>
    <groupId>log4j</groupId>
    <artifactId>log4j</artifactId>
    <version>1.2.8</version>
  </c:dependency>
}}}

and that file lib/log4j/jars/log4j-1.2.8.jar exists as well. Then

{{{
 <c:set var="jdepot.csv" value=" 'lib'.tofile.tourl " />
 <c:getdeps />
}}}

retrieves the file lib/log4j/jars/log4j-1.2.8.jar locally into the current working directory. 

=== Example II ===

Retrieve dependencies from a list of depots into local folder build/lib (which must exists):

{{{
 <c:inline-properties>
   depot1 = http://depot/component
   depot2 = http://depot/3rdparty
   depot3 = http://depot/external
   ..
   depot.csv = ${depot1},${depot2,${depot3}
 <c:/inline-properties>
 ..
 <c:getdeps depotlist="${depot.csv}" dst="build/lib" />
}}}


=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Getdeps.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Getdeps.java Source]

<hr/>
== initssl ==

A task to initialize SSL. The current implementation ensures a SSL implementation is available. Furthermorem this task allows to install a trust store to verify certificates provided by a SSL server.

=== Attributes ===

 * truststore <br/>The trust store to be used. Usage of this attribute is optional. If not used a default trust store, geared for the EPO environment, will be used. Using this attribute will effectively set the system property javax.net.ssl.trustStore. If that property already exists, it is (almost silently) not overriden. Instead a debug message will be generated showing the trust store in use. This allows to override the trust store used via the command line.

=== Example I ===

{{{
 <c:initssl truststore = "${mystore}" />
}}}

=== Last but not least .. ===
Whether specifying a trust store via initssl or via property javax.net.ssl.trustStore makes sense depends on the underlying SSL implementation and configuration. It works out-of-the-box with all Java 1.4 and onwards. Changing the trust store via Ant's command line, like shown in this example, will not work:

{{{
 $ ant -Djavax.net.ssl.trustStore=${mystore}  -- does not work
}}}

Such a property will not make it into your JVM's system properties. They will only be put into your project properties from where they are not visible for the underlying SSL implementation (standard implementation assumed). In order to feed the JVM with a property use environment variable ANT_OPTS:

{{{
 $ export ANT_OPTS=-Djavax.net.ssl.trustStore=${mystore}
 $ ant ..
}}}

=== Further Readings ===
[1] http://www.onjava.com/pub/a/onjava/2001/05/03/java_security.html This article contains also some background information on keystores etc.

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Initssl.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Initssl.java Source]

<hr/>
== property-by-regex == 

A task to compose a property based on existing properties.

The new property is composed by searching for property names matching a given regular expression. Then the new property is created by  concatenating the value of each matching property using a separator of choice.

=== Attributes ===
 * property<br />The name of the property to create
 * regex<br />The regular expression. 
 * sep<br />The separator to use when concatenating
=== Example ===

Assume that the following properties are defined:

{{{
 depot.1.url = http://depot/component
 depot.2.url = http://depot/3rdparty
 depot.3.url = http://depot/externals
}}}

Then

{{{
 <c:property-by-regex property="depot.csv" regex="depot\.\d+\.url" />
}}}

creates property

{{{
 depot.csv = http://depot/component,http://depot/3rdparty,http://depot/externals
}}}

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Property-by-regex.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Property-by-regex.java Source]

<hr/>
== property-handler ==

A task to install a property handler in addition to the standard one provided by Ant. 

This task provides some inline property functions like uppercasing an argument. For example:

{{{
 <c:property-handler />
 ..
 <echo>hello => ${uppercase hello}</echo>
}}}

This snippet would show:

{{{
 [echo] hello => HELLO
}}}

Note that this property handle grets automatically installed when booting the framework.

A list of functions provided by installing property-handler:

{| class="{{Whtable}}
|-
! Function
! Description
|-
| uppercase 
| Puts argument in uppercase letters
|-
| lowercase
| Puts argument in lowercase letters
|-
| length
| Returns the number of characters in argument
|-
| basename
| The base name i.e. a/b/c => c
|-
| dirname
| The directory name i.e. a/bc/ => a/b
|- 
| exists
| "true" if argument exists else "false"
|-
| isfile
| "true" if argument is a file else "false"
|-
| isdir
| "true" if argument is a folder else "false"
|-
| mtime
| Arguments last modification time if existing otherwise ""
|-
| subst
| replace every match of first argument with content of second argument in the third and last argument. For example, ${subst /,_,a/b/c} => a_b_c
|}

=== Attributes ===
 * atleast<br/>The minimum version required.

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Property-handler.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Property-handler.java Source]

<hr/>
== taskdotclasspath ==

This task can be used to perform low level operations on a .classpath file. Supported operations are appending or removing classpath entries or to query the existence of certain entries. Operating on a non existing file does not throw a build exception nor will anything happen, i.e. appending to a non existing file will not create the file. It is expected that other tasks, for example the standard Ant task echoxml are being used to create an initial .classpath file.

taskdotclasspath has been implemented as core task. This is a reference to it's [http://flaka.code.google.com/javadoc/net.haefelingerit.flaka/DotClassPath.html  accompanying Java documentation].

=== Attributes ===
 * op<br/>The operation to be executed where 'a' means append, 'r' means remove and 'q' means query. The character 'u' means update and is a historical synonym for append. When specifying an operation, the input string is trimmed and the first character in the remaining string determines the operation. Further characters given are not taken into account. The default operation is 'a' for append.
 * echo<br/>Whether to dump to final content of .classpath on stdout or not. No dumping by default.
 * file<br/>The file to operate on. The default is .classpath.
 * var<br/>The variable name to be used when looking up dependencies. By default, it is assumed that the current project contains at deps.object an array of all dependencies. When reading classpath entries, each entry is checked against given dependencies (if any) and if so, internally decorated. Dependencies become later important when checking whether a file and a folder are equal in terms of dependencies.
 * logic<br/>Use this attribute to specify the query logic. By default each entry must match. When changing to logical or, it is sufficient that one entry matches. The string value will be normalized, then tested for the following values in a case insensitive manner: "and", "&" and "&&" equals to logical and, while "or","|" or "||" gives the logical or. If the given values does not match, the default value gets applied. 

All string arguments are normalized, i.e. leading and trailing whitespace is ignored. If a normalized string is empty, it will not be passed, i.e will not change the default value.

=== Elements ===

 * classpathentry A standard .classpath entry as it may occurs in Eclipse
 * fileset A standard Ant fileset (see ..). Usually used to specify a list of dependencies.

=== Example: Add Source And Output Path ===

This example assumes that a empty .classpath file exits, i.e. something like

 === .classpath ===
{{{
 <classpath />
}}}

The following operation tries to add Java source paths and one output path to the empty file. 

{{{
 <taskdotclasspath op="a" echo="true">
   <classpathentry kind="src"    path="src" />               -- 1 (src shall exist)
   <classpathentry kind="output" path="build/obj" />         -- 2 (build/obj shall exist)
   -- redundant entries -- 
   <classpathentry kind="src"    path="src" />               -- 3
   <classpathentry kind="src"    path="${base.dir}/src" />   -- 4
   <classpathentry kind="src"    path="../xyz" />            -- 5 (../xyz shall not exist)
   <classpathentry kind="src"    path="/Foobar" />           -- 6 (/Foobar shall exist)
 </taskdotclasspath>
}}}

After this operation, the content of .classpath looks like

 === .classpath ===
{{{
 <classpath>
  <classpathentry kind="output" path="build/obj"/>
  <classpathentry kind="src" path="/Foobar"/>
  <classpathentry kind="src" path="src"/>
 </classpath>
}}}

Notice that entries 3 and 4 are not added again. Both entries are identical with 1 (property base.dir is a property set by Ant pointing to the folder containing the build script being executed). Entry 5 is not added cause it is assumed that parent folder xyz does not exist. Entry 6 has been added cause it is assumed that Eclipses workspace folder contains directory Foobar (by default, the base folders parent folder (i.e. ${base.dir}/..) is assumed to an Eclipse workspace). A path entry to a folder is called a crosslink (to project X).

Notice further that the file's content is sorted. When executing, the final content of .classpath after this operation is dumped to standard out due to attribute echo. Set echo to false or omit the echo task to be silent.

=== Example: Append dependencies ===

The previous example added source and output paths. This example appends jar files required to compile the Java project. All required libs shall for the sake of this example in folder build/lib. The content of this folder shall be:

 * build/lib/log4j-1.2.9.jar<br />The infamous Log4j logging component
 * build/lib/foobar-1.0.jar<br />Another required artifact, supposed to be produced by project Foobar.

Keep in mind that a folder named Foobar exists in the workspace of Eclipse and that the current .classpath entry contains a src entry pointing to that folder. The content of folder build/lib can be conveniently added like shown:

{{{
 <taskdotclasspath op="a">
   <fileset dir="build/lib">
     <include name="*.jar" />
   </fileset>
 </taskdotclasspath>
}}}

Each fileset will eventually be evaluated to a set of classpath entries of kind lib. Thus after this operation, .classpath contains

{{{
 <classpath>
  <classpathentry kind="lib"    path="build/lib/log4j-1.2.9.jar"/> -- new
  <classpathentry kind="output" path="build/obj"/>
  <classpathentry kind="src"    path="/Foobar"/>
  <classpathentry kind="src"    path="src"/>
 </classpath>
}}}

Notice that foobar-1.0.jar does not appear. The reason for this is that .classpath contains path /Foobar. Therefore foobar-1.0.jar would shadow that entry when added before and vice versa.

Be aware that the following does not work:

{{{
 <taskdotclasspath op="a">
   <classpathentry kind="lib" path="build/lib/*.jar" />   -- * does not work *
 </taskdotclasspath>
}}}

There is no technical reason for this - this feature is just not implemented.

=== Example: Append dependencies (II) ===

A better way to include dependencies as the shown in the previous example is 

{{{
 <taskdotclasspath op="a">
   <fileset dir="build/lib">
     <dependency-selector />
   </fileset>
 </taskdotclasspath>
}}}

Selector dependency-selector assures that only those files are taken out of folder build/lib which are really used as dependencies in the project and not just any jar file found therein. dependency-selector has further abilities to limit the search to dependencies in a particular scope etc.

=== Example: Remove Entries ===

Based on the content of the previous example, let's try to remove all crosslinked projects. Let's assume for the sake of this discussion, that a crosslinked project has a path that starts with character '/'. The current content contains just one such entry, namely /Foobar, which would be eliminated by

{{{
 <taskdotclasspath op="r">
  <classpathentry path="/*" />
 </taskdotclasspath>
}}}

Suppose there is the convention that project names start with an upper case letter (like Foobar). The previous task removes any absolute path and it would be better to limit the pattern to remove only folders starting with upper case letters. This can be expressed using a regular expression 

{{{
 <taskdotclasspath op="r">
  <classpathentry path="//[A-Z].*/" />   -- removes /Foobar but not /foobar
 </taskdotclasspath>
}}}

A regular expression is indicated by having first and last character equal (after having removed leading and trailing whitespace). In the example above, character '/' has been used. Any other character would do as well. Therefore is  `1/[A-Z].*1` identical with the expression used before.

The full power of regular expressions is available as given by the underlying Java implementation. See http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html for details.

=== Example: Query Entries ===

It is also possible to query a .classpath file for certain entries. For example,
the following query tests whether a .classpath contains crosslinked projects (assuming that every crosslinked starts with character '/'):

{{{
 <taskdotclasspath op="q" var="are-projects-crosslinked">
  <classpathentry path="/*" />   -- query for crosslinked projects
 </taskdotclasspath>
}}}

The variable given, being are-projects-crosslinked, is only touched if the query evaluates to true, i.e. if .classpath contains matching entries. If so, the variable is set as property to the string value true. This only happens if the property does not exist - otherwise the property is not touched (standard Ant behaviour).

When using more than one entry, then each entry must match. This condition can be changed using attribute logic. When being set to a logical or, it is enough that one entry matches.

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Taskdotclasspath.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Taskdotclasspath.java Source]

<hr/>
== writedeps ==

A task to format dependencies in various predefined styles. In order to use this task, dependencies need to be defined and retrieved. See examples for details.

=== Attributes ===
 * refid<br/> Use this attribute to reference another variable than the default [deps.object]
 * format<br/> Change the format style rather than the default `maven`. Well known styles are:
 ** maven<br/> Format a la Maven
 ** alias<br/> Dump the alias name of each dependency if an alias name exists
 ** flat<br/> Dump the relative depot path 
 * out<br />The file to write to. Use `-` to write to standard out [-].

=== Example I===

A small project defining, retrieving and formating dependencies:
{{{
 <project xmlns:c="antlib:ant.epoline">
  <c:inline-properties>
    jdepot.csv = http://jdepot.internal.epo.org/depot/external
  </c:inline-properties>

  <c:dependencies>
    <c:dependency groupId="log4j" artifactId="log4j" version="1.2.9" />
  </c:dependencies>

  <!-- Retrieve dependencies in order to create reference deps.object -->
  <c:getdeps dst="libdir" depotlist="${jdepot.csv}" />

  <!-- format dependencies referenced by deps.object -->
  <c:writedeps />
 </project>
}}}


When running this script, the following dependency would be reported on standard out:

{{{
 <dependencies>
  <dependency>
   <groupId>log4j</groupId>
   <artifactId>log4j</artifactId>
   <version>1.2.9</version>
   <type>jar</type>
   <scope>compile</scope>
  </dependency>
 </dependencies>
}}}

Output above shows the dependency in format <tt>maven</tt>. The same dependency in
other supported formats are:

{{{
 flat: /log4j/jars/log4j-1.2.9.jar
}}}

=== Further Links ===
 * [http://javadoc.haefelingerit.net/net.haefelingerit.flaka/1.00/net/haefelingerit/flaka/Writedeps.html Javadoc] 
 * [http://code.google.com/p/flaka/source/browse/trunk/src/net/haefelingerit/flaka/Writedeps.java Source]

