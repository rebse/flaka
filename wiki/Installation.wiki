#labels Featured
#summary How to install Flaka

= Installation For The Impatient =

Download latest version of Flaka and *drop* `ant-flaka.x.y.z.jar` into your local Ant installation. There are various techniques how to _drop_. Please read-on for refreshment.

= Before You Start! =

The following *requirements* must be satisfied before you start:

 # Flaka requires *[http://java.sun.com/javase/downloads/index.jsp Java 1.5]* or newer. You can change the version by setting environment variable `JAVA_HOME`. Have also a look at [http://ant.apache.org/manual/index.html Ant's Manual] for other environment variables to be used.
 # [http://ant.apache.org Ant] version 1.7.0 or newer. 


= How to _drop_ the `ant-flaka` jar? =
The most primitive technique is to save `ant-flaka-x.y.z.jar` in Ant's library folder `lib`. If you have no clue where Ant is installed, try 
{{{
 $ ant -diagnostics | grep ant.home
 ant.home: /opt/ant/1.7.1
}}}
Saving something in Ant's library folder may not work due to lack of permission. There's also the disadvantage that when switching to another Ant installation *Flaka* needs to be installed again. Therefore consider to use Ant's standard option `-lib`: 

{{{
 $ ant -lib ant-flaka-x.y.z.jar
}}}

A pretty nice feature of option `-lib` is that if the argument is a directory, that directory is scanned for jar files. Therefore you may instead want to do something like this:
{{{
 $ mkdir $HOME/lib/ant
 $ cp ant-flaka-x.y.z.jar $HOME/lib/ant
 $ ant -lib $HOME/lib/ant
}}}
This approach has the nice advantage that you simply can drop other jar files into folder `$HOME/lib/ant` to make them reachable  without touching the original Ant installation. As already mentioned, this will get handy when you have either multiple Ant installations. Btw, notice that option `-lib` can be applied more than once if the jars to use reside in various folders. Finally notice that folders are not recursively searched.

When working from the command line it's a bit annoying to provide option `-lib` for each and every call of Ant. Fortunatley, Ant recognizes environment variable `ANT_ARGS` which can be used to let `-lib` disappear:
{{{
 $ ANT_ARGS="-lib $HOME/lib/ant"
 $ export ANT_ARGS
}}}
The drawback with this technique is that you need to make sure that this variable is set in every environment you start up Ant. This sounds easier than done. Luckily, Ant reads file `$HOME/.antrc` and `$HOME/.ant/ant.conf` on each and every startup. It's is therefore recommended to set `ANT_ARGS ` in one of this files (without the need to export) to make just every plain call to `ant` *Flaka* aware. For example:
{{{
 $ cat $HOME/.antrc
 ANT_ARGS="-lib $HOME/lib/ant"
}}}

= Check whether Flaka works! =
To check whether your setup of `Flaka` works,  create a local Java project and try to build it. For example, 
{{{
 $ mkdir -p hello/src/demo && cd hello 
 $ cat > src/demo/Hello.java << EOF
   public class Hello {}
 ^D
 $ cat > build.xml << EOF
 <project xmlns:c="antlib:net.haefelingerit.flaka">
   <c:init />
 </project>
 ^D
 $ # let ant build this project
 $ ant
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 ::                     HELLO, FLAKA 1.0                        ::
 ::        use `ant -p' to get a list of useful targets         ::
 :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 [..]
 BUILD SUCCESSFUL
 Total time: 2 seconds
}}}
The call to `ant` builds the package. The result will be file `hello-SNAPSHOT.jar` found in folder `build/dist`:
{{{
 $ jar tvf dist/hello-SNAPSHOT.jar
     0 Thu Jan 17 17:04:08 CET 2009 META-INF/
   667 Thu Jan 17 17:04:06 CET 2009 META-INF/MANIFEST.MF
   120 Thu Jan 17 17:04:08 CET 2009 Hello.class
}}}

